#+TITLE: Implementation of Type Theory based on Dependent Inductive and Coinductive Types
#+AUTHOR: Florian Engel
#+OPTIONS: toc:nil
#+options: H:1
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: default
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header: \input{headerSlides}

* Inductive Types in Coq
  + defined over their constructors
  + each constructor has to give back the defined type
** Examples
   + Booleans
     #+begin_src coq 
       Inductive bool : Set :=
       | True : bool
       | False : bool.
     #+end_src
   + Natural numbers
     #+begin_src coq
       Inductive nat : Set :=
       | O : nat
       | S : nat -> nat.
     #+end_src
* Destructing Inductive Types in Coq
  + also called recursion
  + pattern matches on the constructor
  + gives back values of same type in each match
** Examples
   + negation
     #+begin_src coq 
       Definition neg (b : bool) :=
         match b with
         | True => False
         | False => True
         end.
     #+end_src
   + isZero
     #+begin_src coq 
       Definition isZero (n : nat) :=
         match n with
         | O => True
         | S _ => False
         end.
     #+end_src
* Coinductive Types
  + positive coinductive types
  + negative coinductive types
* Positive Coinductive Types
  + treats recursive occurrence like a value
  + otherwise like inductive types
  + functions which produce such types have to be productive
** Example
   + Stream in coq
     #+begin_src coq
       CoInductive Stream (A : Set) : Set :=
         Cons : A -> Stream A -> Stream A.
     #+end_src
   + repeat function
     #+begin_src coq
       CoFixpoint repeat (A : Set) (x : A) : Stream A :=
         Cons A x (repeat A x).
     #+end_src
* What is wrong about Positive Coinductive Types
  + Symmetry with inductive types not clear
  + Breaks subject reduction
    + Subject reduction: types are preserved after reduction

* Ourys Counterexample
   #+begin_src coq
    CoInductive U : Set := In : U -> U.
   #+end_src
   #+begin_src coq
     CoFixpoint u : U := In u.
   #+end_src
   #+begin_src coq
     Definition force (x: U) : U :=
       match x with
         In y => In y
       end.
   #+end_src
   #+begin_src coq 
     Compute u.
     > cofix Fcofix : U := In Fcofix : U
   #+end_src
   #+begin_src coq 
     Compute (force u).
     > In (cofix Fcofix : U := In Fcofix) : U
   #+end_src
   #+begin_src coq
     Definition eq (x : U) : x = force x :=
       match x with
         In y => eq_refl
       end.
   #+end_src
   #+begin_src coq
     Definition eq_u : u = In u := eq u
   #+end_src
   
* Negative Coinductive Types
  + defined over their destructors
  + functions use copattern matching
** Examples
   + Stream
    #+begin_src coq
      CoInductive Stream (A : Set) : Set :=
        Seq { hd : A; tl : Stream A }.
    #+end_src
   + repeat function
    #+begin_src coq
      CoFixpoint repeat (A : Set) (x : A) : Stream A :=
        {| hd := x; tl := repeat A x|}.
    #+end_src
  

* Type Theory Based on Dependent Inductive and Coinductive Types
  + inductive types: $\mu(X:\Gamma\rat*;\vv{\sigma};\vec{A})$
  + coinductive types $\nu(X:\Gamma\rat*;\vv{\sigma};\vec{A})$
  + constructors: $\alpha_i^\mu$
  + destructors: $\xi_i^\mu$
  + recursion: rec $\vv{(\Gamma_k,y_k).g_k}$
  + corecursion: corec $\vv{(\Gamma_k,y_k).g_k}$

* Symmetry betweeen Inductive and Coinductive Types
   $$\text{Product A B} = \mu(X:*;(());\top)$$
   $$\Gamma_1 = (x:A,y:B)$$
   #+begin_example
   data Product$\langle$A : Set,B : Set$\rangle$ : Set where
      MkProduct : (x : A, x : B) $\rat$ Unit $\rat$ Product
   fst$\langle$A : Set, B : Set$\rangle$  =
     rec Product<A,B> to A where
        { MkProduct x y u = x }
   snd$\langle$A : Set, B : Set$\rangle$  =
     rec Product<A,B> to B where
        { MkProduct x y u = y }
   #+end_example
   $$\text{Product A B} = \nu(X:*;((),());(A,B)$$
   $$\Gamma_1 = \Gamma_2 = \emptyset$$
   #+begin_example
   codata Product$\langle$A : Set, B : Set$\rangle$ : Set where
      Fst : Product $\rat$ A
      Snd : Product $\rat$ B
   mkProduct$\langle$A : Set, B : Set$\rangle$ (x:A, y:B) =
     corec Unit to Product<A,B> where
       { Fst u = x
       ; Snd u = y } @ $\lozenge$
   #+end_example

* Dependent Coinductive Types
  + Partial streams which depend on their definition depth
   $$\text{PStr A}= \nu(X:(k:Conat)\rat*;((succ @ k),(succ @ k));(A,X @ k)$$
   $$\Gamma_1 = \Gamma_2 = (k : Conat)$$
    #+begin_example
    codata PStr$\langle$A : Set$\rangle$ : (n : Conat) $\rat$ Set where
      Hd : (k : Conat) $\rat$ PStr (succ @ k) $\rat$ A
      Tl : (k : Conat) $\rat$ PStr (succ @ k) $\rat$ PStr @ k
    #+end_example
  + Dependent functions 
   $$\text{Pi A B} = \nu(X:*;(());(B @ x)$$
   $$\Gamma_1 = (x : A)$$
    #+begin_example
    codata Pi$\langle$A : Set, B : (x : A) $\rat$ Set$\rangle$ : Set where
      Inst : (x : A) $\rat$ Pi $\rat$ B @ x
    #+end_example


* 
  #+begin_center
  \Huge Demo
  #+end_center

* Other Topics in the Thesis
+ Comparison with Agda
+ Termination and productivity checking with sized types
+ Difference between paper and implementation
  + Rules rewritten to syntax directed one
  + Added type "polymorphism"
  + De-Brujin indexes
