data Nat : Set where
   Z : Unit -> Nat
   S : Nat -> Nat

data Maybe<A : Set> : Set where
  Nothing : Unit -> Maybe
  Just : A -> Maybe


-- Conat = Maybe<Nat>
codata Conat : Set where
  Prev : Conat -> Maybe<Conat>

succ =
  rec Maybe<Nat> to Maybe<Nat> where
    Nothing u = Nothing<Nat> @ u
    Just n = Just<Nat> @ (S @ n)

zero = Just<Nat> @ (Z @ ())
one = succ @ zero
two = succ @ one
inf = Nothing<Nat> @ ()

codata PStr<A : Set> : (n : Maybe<Nat>) -> Set where
  Hd : (k : Maybe<Nat>) -> PStr (succ @ k) -> A
  Tl : (k : Maybe<Nat>) -> PStr (succ @ k) -> PStr @ k

repeat<A : Set>(x : A, n : Maybe<Nat>) =
  corec (n : Maybe<Nat>).Unit to PStr<A> where
    { Hd k s = x
    ; Tl k s = () } @ n @ ()